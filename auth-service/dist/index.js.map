{"version":3,"sources":["db/config.json","db/db.js","db/index.js","model/authentificate.js","model/createUser.js","model/checkEmail.js","model/setPassword.js","model/index.js","constants/index.js","controller/signin.js","controller/signup.js","controller/recover.js","controller/askRecover.js","controller/index.js","routes.js","app.js","index.js"],"names":["module","exports","db","mysql","createPool","config","authentificate","email","pass","Promise","resolve","reject","query","console","log","error","elements","createUser","role","checkEmail","setPassword","privateKey","signin","req","res","next","set","password","send","success","code","msg","result","user","Object","values","JSON","parse","stringify","length","token","jwt","sign","data","e","signup","parseInt","idUser","insertId","recover","decoded","decode","complete","payload","changedRows","askRecover","transporter","nodemailer","createTransport","host","port","secure","auth","info","sendMail","from","to","subject","text","html","routes","app","forEach","route","type","get","name","controller","post","listen"],"mappings":"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","file":"index.js","sourceRoot":"../src","sourcesContent":["module.exports = {\n  \"connectionLimit\": 10, \n  \"password\": \"mouloud\",\n  \"user\": \"root\",\n  \"database\": \"auth_database\",\n  \"host\": \"localhost\",\n  \"port\": \"3306\"\n};","import mysql from 'mysql';\nimport config from './config.json';\n \nlet db = mysql.createPool(config);\n\nexport default db;\n\n","import db from './db';\n\nexport default db;","import db from '../db';\n\nconst authentificate = (email, pass) => {\n\n  return new Promise((resolve, reject) => {\n\n    const query = `SELECT * FROM Users WHERE email='${email}' and pass='${pass}';`;\n\n    console.log(query);\n\n    db.query(query, (error, elements) => {\n        if (error) {\n          return reject(error);\n        }\n        return resolve(elements);\n    });\n    \n  });\n\n};\n\nexport default authentificate;","import db from '../db';\n\nconst createUser = (email, pass, role) => {\n\n  return new Promise((resolve, reject) => {\n\n    const query = `INSERT INTO Users (email,pass,role) VALUES ('${email}','${pass}',${role})`;\n\n    console.log(query);\n\n    db.query(query, (error, elements) => {\n        if (error) {\n          return reject(error);\n        }\n        return resolve(elements);\n    });\n    \n  });\n\n};\n\nexport default createUser;","import db from '../db';\n\nconst checkEmail = (email) => {\n\n  return new Promise((resolve, reject) => {\n\n    const query = `SELECT * FROM Users WHERE email='${email}';`;\n\n    console.log(query);\n\n    db.query(query, (error, elements) => {\n        if (error) {\n          return reject(error);\n        }\n        return resolve(elements);\n    });\n    \n  });\n\n};\n\nexport default checkEmail;","import db from '../db';\n\nconst setPassword = (email, pass) => {\n\n  return new Promise((resolve, reject) => {\n\n    const query = `UPDATE Users SET pass='${pass}' WHERE email='${email}'`;\n\n    console.log(query);\n\n    db.query(query, (error, elements) => {\n      if (error) {\n        return reject(error);\n      }\n      return resolve(elements);\n    });\n    \n  });\n\n};\n\nexport default setPassword;","import authentificate from './authentificate';\nimport createUser from './createUser';\nimport checkEmail from './checkEmail';\nimport setPassword from './setPassword';\n\nexport {\n  authentificate,\n  createUser,\n  checkEmail,\n  setPassword,\n};\n","const privateKey = '6m4By6SJu7';\n\nexport {\n  privateKey,\n};","import jwt from 'jsonwebtoken';\nimport { authentificate } from '../model';\nimport { privateKey } from '../constants';\n\nconst signin = async (req, res, next) => {\n\n  res.set('content-type', 'application/json');\n\n  // Get parameters\n  const email = req.query.email;\n  const password  = req.query.password;\n\n  if (!email || !password) {\n    return res.send({\n      success: false,\n      error: { code: 0, msg: 'NULL PARAMETER' }\n    });\n  }\n\n  try {\n\n    //Traitements\n    let result = await authentificate(email, password);\n    const user = Object.values(JSON.parse(JSON.stringify(result)));\n\n    if (user.length == 0) {\n      return res.send({\n        success: false,\n        error: { code: 2, msg: 'INCORRECT CREDENTIALS' }\n      });\n    }\n\n    //console.log(user[0]);\n\n    let token = jwt.sign(user[0], privateKey);\n\n    res.send({\n      success: true,\n      data: {\n        token\n      }\n    });\n\n  } catch (e) {\n    //console.log(e);\n    return res.send({\n      success: false,\n      error: { code: 1, msg: 'INTERNAL ERROR' }\n    });\n  }\n\n}\n  \nexport default signin;","import { createUser } from '../model';\n\nconst signup = async (req, res, next) => {\n\n  res.set('content-type', 'application/json');\n\n  // Get parameters\n  const email = req.query.email;\n  const password  = req.query.password;\n  let role = req.query.role;\n\n  if (!email || !password || !role) {\n    return res.send({\n      success: false,\n      error: { code: 0, msg: 'NULL PARAMETER' }\n    });\n  }\n\n  role = parseInt(role);\n  let result = null;\n\n  try {\n\n    //Traitements\n    result = await createUser(email, password, role);\n    \n    const idUser = result.insertId;\n    \n    res.send({\n      success: true,\n      data: { idUser }\n    });\n\n  } catch (e) {\n    console.log(e);\n    if (!result) {\n      return res.send({\n        success: false,\n        error: { code: 1, msg: 'EMAIL ALREADY EXISTS' }\n      });\n    }\n    return res.send({\n      success: false,\n      error: { code: 1, msg: 'INTERNAL ERROR' }\n    });\n  }\n\n}\n\nexport default signup;\n","import jwt from 'jsonwebtoken';\nimport { setPassword } from '../model';\n\nconst recover = async (req, res, next) => {\n\n  res.set('content-type', 'application/json');\n\n  // Get parameters\n  const token = req.query.jwt;\n  const password = req.query.password;\n\n  if (!token || !password) {\n    return res.send({\n      success: false,\n      error: { code: 0, msg: 'NULL PARAMETER' }\n    });\n  }\n\n  let decoded = null;\n\n  try {\n\n    // Decode jwt\n    decoded = jwt.decode(token, {complete: true});\n\n    let result = await setPassword(decoded.payload.email, password);\n\n    if (result.changedRows == 0) {\n      return res.send({\n        success: false,\n        error: { code: 4, msg: 'EMAIL ERROR' }\n      });\n    }\n\n    return res.send({\n      success: true\n    });\n\n  } catch (e) {\n    console.log(e);\n    if (!decoded) {\n      return res.send({\n        success: false,\n        error: { code: 5, msg: 'INVALID TOKEN' }\n      });\n    }\n    return res.send({\n      success: false,\n      error: { code: 1, msg: 'INTERNAL ERROR' }\n    });\n  }\n\n}\n\nexport default recover;","/* Il faut autoriser les applications non-sécurisées à se connecter sur GMAIL */\n\nimport nodemailer from 'nodemailer';\nimport { checkEmail } from '../model';\n\nconst askRecover = async (req, res, next) => {\n\n  res.set('content-type', 'application/json');\n\n  // Get parameters\n  const email = req.query.email;\n\n  if (!email) {\n    return res.send({\n      success: false,\n      error: { code: 0, msg: 'NULL PARAMETER' }\n    });\n  }\n\n  try {\n\n    //Traitements\n    let result = await checkEmail(email);\n    const user = Object.values(JSON.parse(JSON.stringify(result)));\n\n    if (user.length == 0) {\n      return res.send({\n        success: false,\n        error: { code: 2, msg: 'EMAIL DOESN\\'T EXISTS' }\n      });\n    }\n\n    // Envoyer un email à l'utilisateur //\n    // *********************************//\n    let transporter = nodemailer.createTransport({\n      host: 'smtp.gmail.com',\n      port: 587,\n      secure: false, // true for 465, false for other ports\n      auth: {\n        user: 'findyourevent2020@gmail.com', // generated ethereal user\n        pass: 'pc3r2020', // generated ethereal password\n      },\n    });\n  \n    // send mail with defined transport object\n    let info = await transporter.sendMail({\n      from: 'findyourevent2020@gmail.com', // sender address\n      to: email, // list of receivers\n      subject: \"Hello\", // Subject line\n      text: \"Hello world?\", // plain text body\n      html: \"<b>Hello world?</b>\", // html body\n    });\n\n    res.send({\n      success: true\n    });\n\n  } catch (e) {\n    console.log(e);\n    return res.send({\n      success: false,\n      error: { code: 1, msg: 'INTERNAL ERROR' }\n    });\n  }\n\n}\n\nexport default askRecover;","import signin from './signin';\nimport signup from './signup';\nimport recover from './recover';\nimport askRecover from './askRecover';\n\nexport {\n  signin,\n  signup,\n  askRecover,\n  recover,\n};","import {\n  signin,\n  signup,\n  askRecover,\n  recover,\n} from './controller';\n\nconst routes = [\n  {\n    \"name\": \"/signin\",\n    \"controller\": signin,\n    \"type\": \"GET\"\n  },\n  {\n    \"name\": \"/signup\",\n    \"controller\": signup,\n    \"type\": \"GET\"\n  },\n  {\n    \"name\": \"/askRecover\",\n    \"controller\": askRecover,\n    \"type\": \"GET\"\n  },\n  {\n    \"name\": \"/recover\",\n    \"controller\": recover,\n    \"type\": \"GET\"\n  }\n];\n\nexport default routes;","import express from 'express';\r\nimport routes from './routes';\r\n\r\nconst app = express();\r\n\r\nroutes.forEach(route => {\r\n  if (route.type == \"GET\") {\r\n    app.get(route.name, route.controller);\r\n  }\r\n  if (route.type == \"POST\") {\r\n    app.post(route.name, route.controller);\r\n  }\r\n});\r\n\r\nexport default app;","import app from './app';\r\n\r\nconst port = '8888';\r\n\r\napp.listen(port, () => {\r\n  console.log(`Server is listening on port ${port}...`);\r\n});"]}